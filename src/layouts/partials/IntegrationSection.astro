---
import ImageMod from "@/components/ImageMod.astro";
import DynamicIcon from "@/helpers/DynamicIcon";
import { markdownify } from "@/lib/utils/textConverter";
import type { Button } from "@/types";
import { getEntry } from "astro:content";

interface Integration {
  title: string;
  subtitle: string;
  description: string;
  list: {
    name: string;
    image: string;
    description: string;
    list: string[];
    button: Button;
  }[];
}
const integrationPage = Astro.url.pathname.startsWith("/integration");

const { title, subtitle, description, list }: Integration = (
  await getEntry("sections", "integration")
).data;
---

{
  (
    <section class="section">
      <div class="container">
        <div class="row">
          <div
            class={`${integrationPage ? "xl:col-9" : "xl:col-7"} mx-auto text-center lg:col-8`}
            data-aos="fade-up-sm">
            {subtitle && (
              <p
                class="mb-2 text-tertiary font-medium"
                set:html={markdownify(subtitle)}
              />
            )}
            {title && !integrationPage && (
              <h2 class="mb-6" set:html={markdownify(title)} />
            )}
            {title && integrationPage && (
              <h1 class="h2 md:h1 mb-6" set:html={markdownify(title)} />
            )}
            {description && (
              <p
                class="text-lg/[inherit]"
                set:html={markdownify(description)}
              />
            )}
          </div>
          <div class="col-12 pt-20" data-aos="fade-up-sm" data-aos-delay={200}>
            <div class="row g-4 justify-center">
              {list?.map((item) => (
                <div class="md:col-6 lg:col-4">
                  <div class="group relative min-h-full rounded-xl bg-theme-light px-6 py-12 transition duration-300 hover:-translate-y-1 md:rounded-3xl">
                    {item.button && item.button.enable && (
                      <a
                        class="btn btn-icon absolute top-[8%] right-[8%] !w-14 border-primary/15"
                        href={item.button.link}
                        target={
                          item.button.link.startsWith("http")
                            ? "_blank"
                            : "_self"
                        }>
                        {markdownify(item.button.label)}
                        <span class="icon-wrapper">
                          <span class="icon">
                            <DynamicIcon icon={"FaArrowRight"} />
                          </span>
                          <span class="icon" aria-hidden="true">
                            <DynamicIcon icon={"FaArrowRight"} />
                          </span>
                        </span>
                      </a>
                    )}
                    {item.image && (
                      <ImageMod
                        class="mb-3 w-28"
                        src={item.image}
                        alt={`${item.name}`}
                      />
                    )}
                    {item.name && (
                      <h3 class="h5 mb-2" set:html={markdownify(item.name)} />
                    )}
                    {item.description && (
                      <p set:html={markdownify(item.description)} />
                    )}
                    {item.list && (
                      <ul class="mt-4 flex flex-wrap gap-2">
                        {item.list.map((listItem) => (
                          <li
                            class="rounded-md bg-dark/10 px-4 py-1"
                            set:html={markdownify(listItem)}
                          />
                        ))}
                      </ul>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}
